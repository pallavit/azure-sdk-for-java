// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.containers.containerregistry.implementation.AccessTokensImpl;
import com.azure.containers.containerregistry.implementation.models.AccessToken;
import com.azure.containers.containerregistry.implementation.models.AcrErrorsException;
import com.azure.containers.containerregistry.implementation.models.PathsV3R3RxOauth2TokenPostRequestbodyContentApplicationXWwwFormUrlencodedSchema;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous AzureContainerRegistry type. */
@ServiceClient(builder = AzureContainerRegistryBuilder.class, isAsync = true)
public final class AccessTokensAsyncClient {
    private final AccessTokensImpl serviceClient;

    /**
     * Initializes an instance of AccessTokens client.
     *
     * @param serviceClient the service client implementation.
     */
    AccessTokensAsyncClient(AccessTokensImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Exchange ACR Refresh token for an ACR Access Token.
     *
     * @param refreshToken The refreshToken parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AccessToken>> getWithResponse(
            PathsV3R3RxOauth2TokenPostRequestbodyContentApplicationXWwwFormUrlencodedSchema refreshToken) {
        return this.serviceClient.getWithResponseAsync(refreshToken);
    }

    /**
     * Exchange ACR Refresh token for an ACR Access Token.
     *
     * @param refreshToken The refreshToken parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AccessToken> get(
            PathsV3R3RxOauth2TokenPostRequestbodyContentApplicationXWwwFormUrlencodedSchema refreshToken) {
        return this.serviceClient.getAsync(refreshToken);
    }

    /**
     * Exchange Username, Password and Scope an ACR Access Token.
     *
     * @param serviceParam Indicates the name of your Azure container registry.
     * @param scope Expected to be a valid scope, and can be specified more than once for multiple scope requests. You
     *     can obtain this from the Www-Authenticate response header from the challenge.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AccessToken>> getFromLoginWithResponse(String serviceParam, String scope) {
        return this.serviceClient.getFromLoginWithResponseAsync(serviceParam, scope);
    }

    /**
     * Exchange Username, Password and Scope an ACR Access Token.
     *
     * @param serviceParam Indicates the name of your Azure container registry.
     * @param scope Expected to be a valid scope, and can be specified more than once for multiple scope requests. You
     *     can obtain this from the Www-Authenticate response header from the challenge.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AccessToken> getFromLogin(String serviceParam, String scope) {
        return this.serviceClient.getFromLoginAsync(serviceParam, scope);
    }
}
