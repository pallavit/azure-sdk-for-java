// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.containers.containerregistry.implementation.AzureContainerRegistryImpl;
import com.azure.core.annotation.ServiceClientBuilder;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.util.Configuration;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** A builder for creating a new instance of the AzureContainerRegistry type. */
@ServiceClientBuilder(
        serviceClients = {
            V2SupportClient.class,
            ManifestsClient.class,
            BlobClient.class,
            RepositoryClient.class,
            TagClient.class,
            RefreshTokensClient.class,
            AccessTokensClient.class,
            V2SupportAsyncClient.class,
            ManifestsAsyncClient.class,
            BlobAsyncClient.class,
            RepositoryAsyncClient.class,
            TagAsyncClient.class,
            RefreshTokensAsyncClient.class,
            AccessTokensAsyncClient.class
        })
public final class AzureContainerRegistryBuilder {
    private static final String SDK_NAME = "name";

    private static final String SDK_VERSION = "version";

    private final Map<String, String> properties = new HashMap<>();

    /** Create an instance of the AzureContainerRegistryBuilder. */
    public AzureContainerRegistryBuilder() {
        this.pipelinePolicies = new ArrayList<>();
    }

    /*
     * Registry login URL
     */
    private String url;

    /**
     * Sets Registry login URL.
     *
     * @param url the url value.
     * @return the AzureContainerRegistryBuilder.
     */
    public AzureContainerRegistryBuilder url(String url) {
        this.url = url;
        return this;
    }

    /*
     * The HTTP pipeline to send requests through
     */
    private HttpPipeline pipeline;

    /**
     * Sets The HTTP pipeline to send requests through.
     *
     * @param pipeline the pipeline value.
     * @return the AzureContainerRegistryBuilder.
     */
    public AzureContainerRegistryBuilder pipeline(HttpPipeline pipeline) {
        this.pipeline = pipeline;
        return this;
    }

    /*
     * The serializer to serialize an object into a string
     */
    private SerializerAdapter serializerAdapter;

    /**
     * Sets The serializer to serialize an object into a string.
     *
     * @param serializerAdapter the serializerAdapter value.
     * @return the AzureContainerRegistryBuilder.
     */
    public AzureContainerRegistryBuilder serializerAdapter(SerializerAdapter serializerAdapter) {
        this.serializerAdapter = serializerAdapter;
        return this;
    }

    /*
     * The HTTP client used to send the request.
     */
    private HttpClient httpClient;

    /**
     * Sets The HTTP client used to send the request.
     *
     * @param httpClient the httpClient value.
     * @return the AzureContainerRegistryBuilder.
     */
    public AzureContainerRegistryBuilder httpClient(HttpClient httpClient) {
        this.httpClient = httpClient;
        return this;
    }

    /*
     * The configuration store that is used during construction of the service
     * client.
     */
    private Configuration configuration;

    /**
     * Sets The configuration store that is used during construction of the service client.
     *
     * @param configuration the configuration value.
     * @return the AzureContainerRegistryBuilder.
     */
    public AzureContainerRegistryBuilder configuration(Configuration configuration) {
        this.configuration = configuration;
        return this;
    }

    /*
     * The logging configuration for HTTP requests and responses.
     */
    private HttpLogOptions httpLogOptions;

    /**
     * Sets The logging configuration for HTTP requests and responses.
     *
     * @param httpLogOptions the httpLogOptions value.
     * @return the AzureContainerRegistryBuilder.
     */
    public AzureContainerRegistryBuilder httpLogOptions(HttpLogOptions httpLogOptions) {
        this.httpLogOptions = httpLogOptions;
        return this;
    }

    /*
     * The retry policy that will attempt to retry failed requests, if
     * applicable.
     */
    private RetryPolicy retryPolicy;

    /**
     * Sets The retry policy that will attempt to retry failed requests, if applicable.
     *
     * @param retryPolicy the retryPolicy value.
     * @return the AzureContainerRegistryBuilder.
     */
    public AzureContainerRegistryBuilder retryPolicy(RetryPolicy retryPolicy) {
        this.retryPolicy = retryPolicy;
        return this;
    }

    /*
     * The list of Http pipeline policies to add.
     */
    private final List<HttpPipelinePolicy> pipelinePolicies;

    /**
     * Adds a custom Http pipeline policy.
     *
     * @param customPolicy The custom Http pipeline policy to add.
     * @return the AzureContainerRegistryBuilder.
     */
    public AzureContainerRegistryBuilder addPolicy(HttpPipelinePolicy customPolicy) {
        pipelinePolicies.add(customPolicy);
        return this;
    }

    /**
     * Builds an instance of AzureContainerRegistryImpl with the provided parameters.
     *
     * @return an instance of AzureContainerRegistryImpl.
     */
    private AzureContainerRegistryImpl buildInnerClient() {
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        if (serializerAdapter == null) {
            this.serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();
        }
        AzureContainerRegistryImpl client = new AzureContainerRegistryImpl(pipeline, serializerAdapter, url);
        return client;
    }

    private HttpPipeline createHttpPipeline() {
        Configuration buildConfiguration =
                (configuration == null) ? Configuration.getGlobalConfiguration() : configuration;
        if (httpLogOptions == null) {
            httpLogOptions = new HttpLogOptions();
        }
        List<HttpPipelinePolicy> policies = new ArrayList<>();
        String clientName = properties.getOrDefault(SDK_NAME, "UnknownName");
        String clientVersion = properties.getOrDefault(SDK_VERSION, "UnknownVersion");
        policies.add(
                new UserAgentPolicy(httpLogOptions.getApplicationId(), clientName, clientVersion, buildConfiguration));
        HttpPolicyProviders.addBeforeRetryPolicies(policies);
        policies.add(retryPolicy == null ? new RetryPolicy() : retryPolicy);
        policies.add(new CookiePolicy());
        policies.addAll(this.pipelinePolicies);
        HttpPolicyProviders.addAfterRetryPolicies(policies);
        policies.add(new HttpLoggingPolicy(httpLogOptions));
        HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                        .policies(policies.toArray(new HttpPipelinePolicy[0]))
                        .httpClient(httpClient)
                        .build();
        return httpPipeline;
    }

    /**
     * Builds an instance of V2SupportAsyncClient async client.
     *
     * @return an instance of V2SupportAsyncClient.
     */
    public V2SupportAsyncClient buildV2SupportAsyncClient() {
        return new V2SupportAsyncClient(buildInnerClient().getV2Supports());
    }

    /**
     * Builds an instance of ManifestsAsyncClient async client.
     *
     * @return an instance of ManifestsAsyncClient.
     */
    public ManifestsAsyncClient buildManifestsAsyncClient() {
        return new ManifestsAsyncClient(buildInnerClient().getManifests());
    }

    /**
     * Builds an instance of BlobAsyncClient async client.
     *
     * @return an instance of BlobAsyncClient.
     */
    public BlobAsyncClient buildBlobAsyncClient() {
        return new BlobAsyncClient(buildInnerClient().getBlobs());
    }

    /**
     * Builds an instance of RepositoryAsyncClient async client.
     *
     * @return an instance of RepositoryAsyncClient.
     */
    public RepositoryAsyncClient buildRepositoryAsyncClient() {
        return new RepositoryAsyncClient(buildInnerClient().getRepositoriesOperations());
    }

    /**
     * Builds an instance of TagAsyncClient async client.
     *
     * @return an instance of TagAsyncClient.
     */
    public TagAsyncClient buildTagAsyncClient() {
        return new TagAsyncClient(buildInnerClient().getTags());
    }

    /**
     * Builds an instance of RefreshTokensAsyncClient async client.
     *
     * @return an instance of RefreshTokensAsyncClient.
     */
    public RefreshTokensAsyncClient buildRefreshTokensAsyncClient() {
        return new RefreshTokensAsyncClient(buildInnerClient().getRefreshTokens());
    }

    /**
     * Builds an instance of AccessTokensAsyncClient async client.
     *
     * @return an instance of AccessTokensAsyncClient.
     */
    public AccessTokensAsyncClient buildAccessTokensAsyncClient() {
        return new AccessTokensAsyncClient(buildInnerClient().getAccessTokens());
    }

    /**
     * Builds an instance of V2SupportClient sync client.
     *
     * @return an instance of V2SupportClient.
     */
    public V2SupportClient buildV2SupportClient() {
        return new V2SupportClient(buildInnerClient().getV2Supports());
    }

    /**
     * Builds an instance of ManifestsClient sync client.
     *
     * @return an instance of ManifestsClient.
     */
    public ManifestsClient buildManifestsClient() {
        return new ManifestsClient(buildInnerClient().getManifests());
    }

    /**
     * Builds an instance of BlobClient sync client.
     *
     * @return an instance of BlobClient.
     */
    public BlobClient buildBlobClient() {
        return new BlobClient(buildInnerClient().getBlobs());
    }

    /**
     * Builds an instance of RepositoryClient sync client.
     *
     * @return an instance of RepositoryClient.
     */
    public RepositoryClient buildRepositoryClient() {
        return new RepositoryClient(buildInnerClient().getRepositoriesOperations());
    }

    /**
     * Builds an instance of TagClient sync client.
     *
     * @return an instance of TagClient.
     */
    public TagClient buildTagClient() {
        return new TagClient(buildInnerClient().getTags());
    }

    /**
     * Builds an instance of RefreshTokensClient sync client.
     *
     * @return an instance of RefreshTokensClient.
     */
    public RefreshTokensClient buildRefreshTokensClient() {
        return new RefreshTokensClient(buildInnerClient().getRefreshTokens());
    }

    /**
     * Builds an instance of AccessTokensClient sync client.
     *
     * @return an instance of AccessTokensClient.
     */
    public AccessTokensClient buildAccessTokensClient() {
        return new AccessTokensClient(buildInnerClient().getAccessTokens());
    }
}
