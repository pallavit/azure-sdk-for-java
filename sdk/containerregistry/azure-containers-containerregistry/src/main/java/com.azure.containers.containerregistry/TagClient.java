// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.containers.containerregistry.implementation.TagsImpl;
import com.azure.containers.containerregistry.implementation.models.AcrErrorsException;
import com.azure.containers.containerregistry.implementation.models.ChangeableAttributes;
import com.azure.containers.containerregistry.implementation.models.TagAttributes;
import com.azure.containers.containerregistry.implementation.models.TagList;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Initializes a new instance of the synchronous AzureContainerRegistry type. */
@ServiceClient(builder = AzureContainerRegistryBuilder.class)
public final class TagClient {
    private final TagsImpl serviceClient;

    /**
     * Initializes an instance of Tags client.
     *
     * @param serviceClient the service client implementation.
     */
    TagClient(TagsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * List tags of a repository.
     *
     * @param name Name of the image (including the namespace).
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @param digest filter by digest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of tag details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TagList getList(String name, String last, Integer n, String orderby, String digest) {
        return this.serviceClient.getList(name, last, n, orderby, digest);
    }

    /**
     * List tags of a repository.
     *
     * @param name Name of the image (including the namespace).
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @param digest filter by digest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of tag details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TagList> getListWithResponse(
            String name, String last, Integer n, String orderby, String digest, Context context) {
        return this.serviceClient.getListWithResponse(name, last, n, orderby, digest, context);
    }

    /**
     * Get tag attributes by tag.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tag attributes by tag.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TagAttributes getAttributes(String name, String reference) {
        return this.serviceClient.getAttributes(name, reference);
    }

    /**
     * Get tag attributes by tag.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tag attributes by tag.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TagAttributes> getAttributesWithResponse(String name, String reference, Context context) {
        return this.serviceClient.getAttributesWithResponse(name, reference, context);
    }

    /**
     * Update tag attributes.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateAttributes(String name, String reference, ChangeableAttributes value) {
        this.serviceClient.updateAttributes(name, reference, value);
    }

    /**
     * Update tag attributes.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @param value Repository attribute value.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateAttributesWithResponse(
            String name, String reference, ChangeableAttributes value, Context context) {
        return this.serviceClient.updateAttributesWithResponse(name, reference, value, context);
    }

    /**
     * Delete tag.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String name, String reference) {
        this.serviceClient.delete(name, reference);
    }

    /**
     * Delete tag.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String name, String reference, Context context) {
        return this.serviceClient.deleteWithResponse(name, reference, context);
    }
}
