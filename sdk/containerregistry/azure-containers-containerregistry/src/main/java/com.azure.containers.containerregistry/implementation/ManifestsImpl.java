// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry.implementation;

import com.azure.containers.containerregistry.implementation.models.AcrErrorsException;
import com.azure.containers.containerregistry.implementation.models.AcrManifests;
import com.azure.containers.containerregistry.implementation.models.ChangeableAttributes;
import com.azure.containers.containerregistry.implementation.models.Manifest;
import com.azure.containers.containerregistry.implementation.models.ManifestAttributes;
import com.azure.containers.containerregistry.implementation.models.ManifestWrapper;
import com.azure.containers.containerregistry.implementation.models.ManifestsCreateResponse;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Manifests. */
public final class ManifestsImpl {
    /** The proxy service used to perform REST calls. */
    private final ManifestsService service;

    /** The service client containing this operation class. */
    private final AzureContainerRegistryImpl client;

    /**
     * Initializes an instance of ManifestsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ManifestsImpl(AzureContainerRegistryImpl client) {
        this.service =
                RestProxy.create(ManifestsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureContainerRegistryManifests to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{url}")
    @ServiceInterface(name = "AzureContainerRegist")
    private interface ManifestsService {
        @Get("/v2/{name}/manifests/{reference}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<Response<ManifestWrapper>> get(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @PathParam("reference") String reference,
                @HeaderParam("accept") String accept,
                @HeaderParam("Accept") String acceptParam,
                Context context);

        @Put("/v2/{name}/manifests/{reference}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<ManifestsCreateResponse> create(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @PathParam("reference") String reference,
                @BodyParam("application/vnd.docker.distribution.manifest.v2+json") Manifest payload,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/v2/{name}/manifests/{reference}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<Response<Void>> delete(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @PathParam("reference") String reference,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/acr/v1/{name}/_manifests")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<Response<AcrManifests>> getList(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @QueryParam("last") String last,
                @QueryParam("n") Integer n,
                @QueryParam("orderby") String orderby,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/acr/v1/{name}/_manifests/{reference}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<Response<ManifestAttributes>> getAttributes(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @PathParam("reference") String reference,
                @HeaderParam("Accept") String accept,
                Context context);

        @Patch("/acr/v1/{name}/_manifests/{reference}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<Response<Void>> updateAttributes(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @PathParam("reference") String reference,
                @BodyParam("application/json") ChangeableAttributes value,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * Get the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param accept Accept header string delimited by comma. For example,
     *     application/vnd.docker.distribution.manifest.v2+json.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ManifestWrapper>> getWithResponseAsync(String name, String reference, String accept) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.get(this.client.getUrl(), name, reference, accept, accept, context));
    }

    /**
     * Get the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param accept Accept header string delimited by comma. For example,
     *     application/vnd.docker.distribution.manifest.v2+json.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ManifestWrapper>> getWithResponseAsync(
            String name, String reference, String accept, Context context) {
        final String accept = "application/json";
        return service.get(this.client.getUrl(), name, reference, accept, accept, context);
    }

    /**
     * Get the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param accept Accept header string delimited by comma. For example,
     *     application/vnd.docker.distribution.manifest.v2+json.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ManifestWrapper> getAsync(String name, String reference, String accept) {
        return getWithResponseAsync(name, reference, accept)
                .flatMap(
                        (Response<ManifestWrapper> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param accept Accept header string delimited by comma. For example,
     *     application/vnd.docker.distribution.manifest.v2+json.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ManifestWrapper> getAsync(String name, String reference, String accept, Context context) {
        return getWithResponseAsync(name, reference, accept, context)
                .flatMap(
                        (Response<ManifestWrapper> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param accept Accept header string delimited by comma. For example,
     *     application/vnd.docker.distribution.manifest.v2+json.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ManifestWrapper get(String name, String reference, String accept) {
        return getAsync(name, reference, accept).block();
    }

    /**
     * Get the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param accept Accept header string delimited by comma. For example,
     *     application/vnd.docker.distribution.manifest.v2+json.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ManifestWrapper> getWithResponse(String name, String reference, String accept, Context context) {
        return getWithResponseAsync(name, reference, accept, context).block();
    }

    /**
     * Put the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param payload Manifest body, can take v1 or v2 values depending on accept header.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ManifestsCreateResponse> createWithResponseAsync(String name, String reference, Manifest payload) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.create(this.client.getUrl(), name, reference, payload, accept, context));
    }

    /**
     * Put the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param payload Manifest body, can take v1 or v2 values depending on accept header.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ManifestsCreateResponse> createWithResponseAsync(
            String name, String reference, Manifest payload, Context context) {
        final String accept = "application/json";
        return service.create(this.client.getUrl(), name, reference, payload, accept, context);
    }

    /**
     * Put the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param payload Manifest body, can take v1 or v2 values depending on accept header.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Object> createAsync(String name, String reference, Manifest payload) {
        return createWithResponseAsync(name, reference, payload)
                .flatMap(
                        (ManifestsCreateResponse res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Put the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param payload Manifest body, can take v1 or v2 values depending on accept header.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Object> createAsync(String name, String reference, Manifest payload, Context context) {
        return createWithResponseAsync(name, reference, payload, context)
                .flatMap(
                        (ManifestsCreateResponse res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Put the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param payload Manifest body, can take v1 or v2 values depending on accept header.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object create(String name, String reference, Manifest payload) {
        return createAsync(name, reference, payload).block();
    }

    /**
     * Put the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param payload Manifest body, can take v1 or v2 values depending on accept header.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> createWithResponse(String name, String reference, Manifest payload, Context context) {
        return createWithResponseAsync(name, reference, payload, context).block();
    }

    /**
     * Delete the manifest identified by `name` and `reference`. Note that a manifest can _only_ be deleted by `digest`.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String name, String reference) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.delete(this.client.getUrl(), name, reference, accept, context));
    }

    /**
     * Delete the manifest identified by `name` and `reference`. Note that a manifest can _only_ be deleted by `digest`.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String name, String reference, Context context) {
        final String accept = "application/json";
        return service.delete(this.client.getUrl(), name, reference, accept, context);
    }

    /**
     * Delete the manifest identified by `name` and `reference`. Note that a manifest can _only_ be deleted by `digest`.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String name, String reference) {
        return deleteWithResponseAsync(name, reference).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete the manifest identified by `name` and `reference`. Note that a manifest can _only_ be deleted by `digest`.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String name, String reference, Context context) {
        return deleteWithResponseAsync(name, reference, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete the manifest identified by `name` and `reference`. Note that a manifest can _only_ be deleted by `digest`.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String name, String reference) {
        deleteAsync(name, reference).block();
    }

    /**
     * Delete the manifest identified by `name` and `reference`. Note that a manifest can _only_ be deleted by `digest`.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String name, String reference, Context context) {
        return deleteWithResponseAsync(name, reference, context).block();
    }

    /**
     * List manifests of a repository.
     *
     * @param name Name of the image (including the namespace).
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AcrManifests>> getListWithResponseAsync(String name, String last, Integer n, String orderby) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.getList(this.client.getUrl(), name, last, n, orderby, accept, context));
    }

    /**
     * List manifests of a repository.
     *
     * @param name Name of the image (including the namespace).
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AcrManifests>> getListWithResponseAsync(
            String name, String last, Integer n, String orderby, Context context) {
        final String accept = "application/json";
        return service.getList(this.client.getUrl(), name, last, n, orderby, accept, context);
    }

    /**
     * List manifests of a repository.
     *
     * @param name Name of the image (including the namespace).
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AcrManifests> getListAsync(String name, String last, Integer n, String orderby) {
        return getListWithResponseAsync(name, last, n, orderby)
                .flatMap(
                        (Response<AcrManifests> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * List manifests of a repository.
     *
     * @param name Name of the image (including the namespace).
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AcrManifests> getListAsync(String name, String last, Integer n, String orderby, Context context) {
        return getListWithResponseAsync(name, last, n, orderby, context)
                .flatMap(
                        (Response<AcrManifests> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * List manifests of a repository.
     *
     * @param name Name of the image (including the namespace).
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AcrManifests getList(String name, String last, Integer n, String orderby) {
        return getListAsync(name, last, n, orderby).block();
    }

    /**
     * List manifests of a repository.
     *
     * @param name Name of the image (including the namespace).
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AcrManifests> getListWithResponse(
            String name, String last, Integer n, String orderby, Context context) {
        return getListWithResponseAsync(name, last, n, orderby, context).block();
    }

    /**
     * Get manifest attributes.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ManifestAttributes>> getAttributesWithResponseAsync(String name, String reference) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.getAttributes(this.client.getUrl(), name, reference, accept, context));
    }

    /**
     * Get manifest attributes.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ManifestAttributes>> getAttributesWithResponseAsync(
            String name, String reference, Context context) {
        final String accept = "application/json";
        return service.getAttributes(this.client.getUrl(), name, reference, accept, context);
    }

    /**
     * Get manifest attributes.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ManifestAttributes> getAttributesAsync(String name, String reference) {
        return getAttributesWithResponseAsync(name, reference)
                .flatMap(
                        (Response<ManifestAttributes> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get manifest attributes.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ManifestAttributes> getAttributesAsync(String name, String reference, Context context) {
        return getAttributesWithResponseAsync(name, reference, context)
                .flatMap(
                        (Response<ManifestAttributes> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get manifest attributes.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ManifestAttributes getAttributes(String name, String reference) {
        return getAttributesAsync(name, reference).block();
    }

    /**
     * Get manifest attributes.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ManifestAttributes> getAttributesWithResponse(String name, String reference, Context context) {
        return getAttributesWithResponseAsync(name, reference, context).block();
    }

    /**
     * Update attributes of a manifest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateAttributesWithResponseAsync(
            String name, String reference, ChangeableAttributes value) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.updateAttributes(this.client.getUrl(), name, reference, value, accept, context));
    }

    /**
     * Update attributes of a manifest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param value Repository attribute value.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateAttributesWithResponseAsync(
            String name, String reference, ChangeableAttributes value, Context context) {
        final String accept = "application/json";
        return service.updateAttributes(this.client.getUrl(), name, reference, value, accept, context);
    }

    /**
     * Update attributes of a manifest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateAttributesAsync(String name, String reference, ChangeableAttributes value) {
        return updateAttributesWithResponseAsync(name, reference, value).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Update attributes of a manifest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param value Repository attribute value.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateAttributesAsync(
            String name, String reference, ChangeableAttributes value, Context context) {
        return updateAttributesWithResponseAsync(name, reference, value, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Update attributes of a manifest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateAttributes(String name, String reference, ChangeableAttributes value) {
        updateAttributesAsync(name, reference, value).block();
    }

    /**
     * Update attributes of a manifest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param value Repository attribute value.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateAttributesWithResponse(
            String name, String reference, ChangeableAttributes value, Context context) {
        return updateAttributesWithResponseAsync(name, reference, value, context).block();
    }
}
