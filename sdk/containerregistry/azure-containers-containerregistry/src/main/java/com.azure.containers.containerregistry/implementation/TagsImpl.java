// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry.implementation;

import com.azure.containers.containerregistry.implementation.models.AcrErrorsException;
import com.azure.containers.containerregistry.implementation.models.ChangeableAttributes;
import com.azure.containers.containerregistry.implementation.models.TagAttributes;
import com.azure.containers.containerregistry.implementation.models.TagList;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Tags. */
public final class TagsImpl {
    /** The proxy service used to perform REST calls. */
    private final TagsService service;

    /** The service client containing this operation class. */
    private final AzureContainerRegistryImpl client;

    /**
     * Initializes an instance of TagsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    TagsImpl(AzureContainerRegistryImpl client) {
        this.service = RestProxy.create(TagsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureContainerRegistryTags to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{url}")
    @ServiceInterface(name = "AzureContainerRegist")
    private interface TagsService {
        @Get("/acr/v1/{name}/_tags")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<Response<TagList>> getList(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @QueryParam("last") String last,
                @QueryParam("n") Integer n,
                @QueryParam("orderby") String orderby,
                @QueryParam("digest") String digest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/acr/v1/{name}/_tags/{reference}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<Response<TagAttributes>> getAttributes(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @PathParam("reference") String reference,
                @HeaderParam("Accept") String accept,
                Context context);

        @Patch("/acr/v1/{name}/_tags/{reference}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<Response<Void>> updateAttributes(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @PathParam("reference") String reference,
                @BodyParam("application/json") ChangeableAttributes value,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/acr/v1/{name}/_tags/{reference}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<Response<Void>> delete(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @PathParam("reference") String reference,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * List tags of a repository.
     *
     * @param name Name of the image (including the namespace).
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @param digest filter by digest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of tag details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TagList>> getListWithResponseAsync(
            String name, String last, Integer n, String orderby, String digest, Context context) {
        final String accept = "application/json";
        return service.getList(this.client.getUrl(), name, last, n, orderby, digest, accept, context);
    }

    /**
     * Get tag attributes by tag.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tag attributes by tag.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TagAttributes>> getAttributesWithResponseAsync(
            String name, String reference, Context context) {
        final String accept = "application/json";
        return service.getAttributes(this.client.getUrl(), name, reference, accept, context);
    }

    /**
     * Update tag attributes.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @param value Repository attribute value.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateAttributesWithResponseAsync(
            String name, String reference, ChangeableAttributes value, Context context) {
        final String accept = "application/json";
        return service.updateAttributes(this.client.getUrl(), name, reference, value, accept, context);
    }

    /**
     * Delete tag.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String name, String reference, Context context) {
        final String accept = "application/json";
        return service.delete(this.client.getUrl(), name, reference, accept, context);
    }
}
