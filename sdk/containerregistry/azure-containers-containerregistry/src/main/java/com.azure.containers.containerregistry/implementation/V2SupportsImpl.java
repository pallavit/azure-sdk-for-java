// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry.implementation;

import com.azure.containers.containerregistry.implementation.models.AcrErrorsException;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in V2Supports. */
public final class V2SupportsImpl {
    /** The proxy service used to perform REST calls. */
    private final V2SupportsService service;

    /** The service client containing this operation class. */
    private final AzureContainerRegistryImpl client;

    /**
     * Initializes an instance of V2SupportsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    V2SupportsImpl(AzureContainerRegistryImpl client) {
        this.service =
                RestProxy.create(V2SupportsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureContainerRegistryV2Supports to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{url}")
    @ServiceInterface(name = "AzureContainerRegist")
    private interface V2SupportsService {
        @Get("/v2/")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<Response<Void>> check(@HostParam("url") String url, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Tells whether this Docker Registry instance supports Docker Registry HTTP API v2.
     *
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> checkWithResponseAsync() {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.check(this.client.getUrl(), accept, context));
    }

    /**
     * Tells whether this Docker Registry instance supports Docker Registry HTTP API v2.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> checkWithResponseAsync(Context context) {
        final String accept = "application/json";
        return service.check(this.client.getUrl(), accept, context);
    }

    /**
     * Tells whether this Docker Registry instance supports Docker Registry HTTP API v2.
     *
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> checkAsync() {
        return checkWithResponseAsync().flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Tells whether this Docker Registry instance supports Docker Registry HTTP API v2.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> checkAsync(Context context) {
        return checkWithResponseAsync(context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Tells whether this Docker Registry instance supports Docker Registry HTTP API v2.
     *
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void check() {
        checkAsync().block();
    }

    /**
     * Tells whether this Docker Registry instance supports Docker Registry HTTP API v2.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> checkWithResponse(Context context) {
        return checkWithResponseAsync(context).block();
    }
}
