// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.containers.containerregistry.implementation.TagsImpl;
import com.azure.containers.containerregistry.implementation.models.AcrErrorsException;
import com.azure.containers.containerregistry.implementation.models.ChangeableAttributes;
import com.azure.containers.containerregistry.implementation.models.TagAttributes;
import com.azure.containers.containerregistry.implementation.models.TagList;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous AzureContainerRegistry type. */
@ServiceClient(builder = AzureContainerRegistryBuilder.class, isAsync = true)
public final class TagAsyncClient {
    private final TagsImpl serviceClient;

    /**
     * Initializes an instance of Tags client.
     *
     * @param serviceClient the service client implementation.
     */
    TagAsyncClient(TagsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * List tags of a repository.
     *
     * @param name Name of the image (including the namespace).
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @param digest filter by digest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of tag details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TagList>> getListWithResponse(
            String name, String last, Integer n, String orderby, String digest) {
        return this.serviceClient.getListWithResponseAsync(name, last, n, orderby, digest);
    }

    /**
     * List tags of a repository.
     *
     * @param name Name of the image (including the namespace).
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @param digest filter by digest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of tag details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TagList> getList(String name, String last, Integer n, String orderby, String digest) {
        return this.serviceClient.getListAsync(name, last, n, orderby, digest);
    }

    /**
     * Get tag attributes by tag.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tag attributes by tag.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TagAttributes>> getAttributesWithResponse(String name, String reference) {
        return this.serviceClient.getAttributesWithResponseAsync(name, reference);
    }

    /**
     * Get tag attributes by tag.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tag attributes by tag.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TagAttributes> getAttributes(String name, String reference) {
        return this.serviceClient.getAttributesAsync(name, reference);
    }

    /**
     * Update tag attributes.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateAttributesWithResponse(
            String name, String reference, ChangeableAttributes value) {
        return this.serviceClient.updateAttributesWithResponseAsync(name, reference, value);
    }

    /**
     * Update tag attributes.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateAttributes(String name, String reference, ChangeableAttributes value) {
        return this.serviceClient.updateAttributesAsync(name, reference, value);
    }

    /**
     * Delete tag.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponse(String name, String reference) {
        return this.serviceClient.deleteWithResponseAsync(name, reference);
    }

    /**
     * Delete tag.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String name, String reference) {
        return this.serviceClient.deleteAsync(name, reference);
    }
}
