// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.containers.containerregistry.implementation.RepositoriesOperationsImpl;
import com.azure.containers.containerregistry.implementation.models.AcrErrorsException;
import com.azure.containers.containerregistry.implementation.models.ChangeableAttributes;
import com.azure.containers.containerregistry.implementation.models.DeletedRepository;
import com.azure.containers.containerregistry.implementation.models.Repositories;
import com.azure.containers.containerregistry.implementation.models.RepositoriesGetListResponse;
import com.azure.containers.containerregistry.implementation.models.RepositoryAttributes;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous AzureContainerRegistry type. */
@ServiceClient(builder = AzureContainerRegistryBuilder.class, isAsync = true)
public final class RepositoryAsyncClient {
    private final RepositoriesOperationsImpl serviceClient;

    /**
     * Initializes an instance of RepositoriesOperations client.
     *
     * @param serviceClient the service client implementation.
     */
    RepositoryAsyncClient(RepositoriesOperationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * List repositories.
     *
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of repositories.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RepositoriesGetListResponse> getListWithResponse(String last, Integer n) {
        return this.serviceClient.getListWithResponseAsync(last, n);
    }

    /**
     * List repositories.
     *
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of repositories.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Repositories> getList(String last, Integer n) {
        return this.serviceClient.getListAsync(last, n);
    }

    /**
     * Get repository attributes.
     *
     * @param name Name of the image (including the namespace).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return repository attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RepositoryAttributes>> getAttributesWithResponse(String name) {
        return this.serviceClient.getAttributesWithResponseAsync(name);
    }

    /**
     * Get repository attributes.
     *
     * @param name Name of the image (including the namespace).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return repository attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RepositoryAttributes> getAttributes(String name) {
        return this.serviceClient.getAttributesAsync(name);
    }

    /**
     * Delete the repository identified by `name`.
     *
     * @param name Name of the image (including the namespace).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deleted repository.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DeletedRepository>> deleteWithResponse(String name) {
        return this.serviceClient.deleteWithResponseAsync(name);
    }

    /**
     * Delete the repository identified by `name`.
     *
     * @param name Name of the image (including the namespace).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deleted repository.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeletedRepository> delete(String name) {
        return this.serviceClient.deleteAsync(name);
    }

    /**
     * Update the attribute identified by `name` where `reference` is the name of the repository.
     *
     * @param name Name of the image (including the namespace).
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateAttributesWithResponse(String name, ChangeableAttributes value) {
        return this.serviceClient.updateAttributesWithResponseAsync(name, value);
    }

    /**
     * Update the attribute identified by `name` where `reference` is the name of the repository.
     *
     * @param name Name of the image (including the namespace).
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateAttributes(String name, ChangeableAttributes value) {
        return this.serviceClient.updateAttributesAsync(name, value);
    }
}
