// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.containers.containerregistry.implementation.BlobsImpl;
import com.azure.containers.containerregistry.implementation.models.AcrErrorsException;
import com.azure.containers.containerregistry.implementation.models.BlobsCheckChunkResponse;
import com.azure.containers.containerregistry.implementation.models.BlobsCheckResponse;
import com.azure.containers.containerregistry.implementation.models.BlobsEndUploadResponse;
import com.azure.containers.containerregistry.implementation.models.BlobsGetStatusResponse;
import com.azure.containers.containerregistry.implementation.models.BlobsMountResponse;
import com.azure.containers.containerregistry.implementation.models.BlobsStartUploadResponse;
import com.azure.containers.containerregistry.implementation.models.BlobsUploadResponse;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.StreamResponse;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous AzureContainerRegistry type. */
@ServiceClient(builder = AzureContainerRegistryBuilder.class, isAsync = true)
public final class BlobAsyncClient {
    private final BlobsImpl serviceClient;

    /**
     * Initializes an instance of Blobs client.
     *
     * @param serviceClient the service client implementation.
     */
    BlobAsyncClient(BlobsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Retrieve the blob from the registry identified by digest.
     *
     * @param name Name of the image (including the namespace).
     * @param digest Digest of a BLOB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> getWithResponse(String name, String digest) {
        return this.serviceClient.getWithResponseAsync(name, digest);
    }

    /**
     * Retrieve the blob from the registry identified by digest.
     *
     * @param name Name of the image (including the namespace).
     * @param digest Digest of a BLOB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<ByteBuffer> get(String name, String digest) {
        return this.serviceClient.getAsync(name, digest);
    }

    /**
     * Same as GET, except only the headers are returned.
     *
     * @param name Name of the image (including the namespace).
     * @param digest Digest of a BLOB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BlobsCheckResponse> checkWithResponse(String name, String digest) {
        return this.serviceClient.checkWithResponseAsync(name, digest);
    }

    /**
     * Same as GET, except only the headers are returned.
     *
     * @param name Name of the image (including the namespace).
     * @param digest Digest of a BLOB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> check(String name, String digest) {
        return this.serviceClient.checkAsync(name, digest);
    }

    /**
     * Removes an already uploaded blob.
     *
     * @param name Name of the image (including the namespace).
     * @param digest Digest of a BLOB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> deleteWithResponse(String name, String digest) {
        return this.serviceClient.deleteWithResponseAsync(name, digest);
    }

    /**
     * Removes an already uploaded blob.
     *
     * @param name Name of the image (including the namespace).
     * @param digest Digest of a BLOB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<ByteBuffer> delete(String name, String digest) {
        return this.serviceClient.deleteAsync(name, digest);
    }

    /**
     * Mount a blob identified by the `mount` parameter from another repository.
     *
     * @param name Name of the image (including the namespace).
     * @param from Name of the source repository.
     * @param mount Digest of blob to mount from the source repository.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BlobsMountResponse> mountWithResponse(String name, String from, String mount) {
        return this.serviceClient.mountWithResponseAsync(name, from, mount);
    }

    /**
     * Mount a blob identified by the `mount` parameter from another repository.
     *
     * @param name Name of the image (including the namespace).
     * @param from Name of the source repository.
     * @param mount Digest of blob to mount from the source repository.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> mount(String name, String from, String mount) {
        return this.serviceClient.mountAsync(name, from, mount);
    }

    /**
     * Retrieve status of upload identified by uuid. The primary purpose of this endpoint is to resolve the current
     * status of a resumable upload.
     *
     * @param location Link acquired from upload start or previous chunk. Note, do not include initial / (must do
     *     substring(1) ).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BlobsGetStatusResponse> getStatusWithResponse(String location) {
        return this.serviceClient.getStatusWithResponseAsync(location);
    }

    /**
     * Retrieve status of upload identified by uuid. The primary purpose of this endpoint is to resolve the current
     * status of a resumable upload.
     *
     * @param location Link acquired from upload start or previous chunk. Note, do not include initial / (must do
     *     substring(1) ).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getStatus(String location) {
        return this.serviceClient.getStatusAsync(location);
    }

    /**
     * Upload a stream of data without completing the upload.
     *
     * @param location Link acquired from upload start or previous chunk. Note, do not include initial / (must do
     *     substring(1) ).
     * @param value Raw data of blob.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BlobsUploadResponse> uploadWithResponse(String location, Flux<ByteBuffer> value, long contentLength) {
        return this.serviceClient.uploadWithResponseAsync(location, value, contentLength);
    }

    /**
     * Upload a stream of data without completing the upload.
     *
     * @param location Link acquired from upload start or previous chunk. Note, do not include initial / (must do
     *     substring(1) ).
     * @param value Raw data of blob.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> upload(String location, Flux<ByteBuffer> value, long contentLength) {
        return this.serviceClient.uploadAsync(location, value, contentLength);
    }

    /**
     * Complete the upload, providing all the data in the body, if necessary. A request without a body will just
     * complete the upload with previously uploaded content.
     *
     * @param digest Digest of a BLOB.
     * @param location Link acquired from upload start or previous chunk. Note, do not include initial / (must do
     *     substring(1) ).
     * @param value Optional raw data of blob.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BlobsEndUploadResponse> endUploadWithResponse(
            String digest, String location, Flux<ByteBuffer> value, long contentLength) {
        return this.serviceClient.endUploadWithResponseAsync(digest, location, value, contentLength);
    }

    /**
     * Complete the upload, providing all the data in the body, if necessary. A request without a body will just
     * complete the upload with previously uploaded content.
     *
     * @param digest Digest of a BLOB.
     * @param location Link acquired from upload start or previous chunk. Note, do not include initial / (must do
     *     substring(1) ).
     * @param value Optional raw data of blob.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> endUpload(String digest, String location, Flux<ByteBuffer> value, long contentLength) {
        return this.serviceClient.endUploadAsync(digest, location, value, contentLength);
    }

    /**
     * Cancel outstanding upload processes, releasing associated resources. If this is not called, the unfinished
     * uploads will eventually timeout.
     *
     * @param location Link acquired from upload start or previous chunk. Note, do not include initial / (must do
     *     substring(1) ).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelUploadWithResponse(String location) {
        return this.serviceClient.cancelUploadWithResponseAsync(location);
    }

    /**
     * Cancel outstanding upload processes, releasing associated resources. If this is not called, the unfinished
     * uploads will eventually timeout.
     *
     * @param location Link acquired from upload start or previous chunk. Note, do not include initial / (must do
     *     substring(1) ).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> cancelUpload(String location) {
        return this.serviceClient.cancelUploadAsync(location);
    }

    /**
     * Initiate a resumable blob upload with an empty request body.
     *
     * @param name Name of the image (including the namespace).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BlobsStartUploadResponse> startUploadWithResponse(String name) {
        return this.serviceClient.startUploadWithResponseAsync(name);
    }

    /**
     * Initiate a resumable blob upload with an empty request body.
     *
     * @param name Name of the image (including the namespace).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> startUpload(String name) {
        return this.serviceClient.startUploadAsync(name);
    }

    /**
     * Retrieve the blob from the registry identified by `digest`. This endpoint may also support RFC7233 compliant
     * range requests. Support can be detected by issuing a HEAD request. If the header `Accept-Range: bytes` is
     * returned, range requests can be used to fetch partial content.
     *
     * @param name Name of the image (including the namespace).
     * @param digest Digest of a BLOB.
     * @param range Format : bytes=&lt;start&gt;-&lt;end&gt;, HTTP Range header specifying blob chunk.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> getChunkWithResponse(String name, String digest, String range) {
        return this.serviceClient.getChunkWithResponseAsync(name, digest, range);
    }

    /**
     * Retrieve the blob from the registry identified by `digest`. This endpoint may also support RFC7233 compliant
     * range requests. Support can be detected by issuing a HEAD request. If the header `Accept-Range: bytes` is
     * returned, range requests can be used to fetch partial content.
     *
     * @param name Name of the image (including the namespace).
     * @param digest Digest of a BLOB.
     * @param range Format : bytes=&lt;start&gt;-&lt;end&gt;, HTTP Range header specifying blob chunk.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<ByteBuffer> getChunk(String name, String digest, String range) {
        return this.serviceClient.getChunkAsync(name, digest, range);
    }

    /**
     * Same as GET, except only the headers are returned.
     *
     * @param name Name of the image (including the namespace).
     * @param digest Digest of a BLOB.
     * @param range Format : bytes=&lt;start&gt;-&lt;end&gt;, HTTP Range header specifying blob chunk.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BlobsCheckChunkResponse> checkChunkWithResponse(String name, String digest, String range) {
        return this.serviceClient.checkChunkWithResponseAsync(name, digest, range);
    }

    /**
     * Same as GET, except only the headers are returned.
     *
     * @param name Name of the image (including the namespace).
     * @param digest Digest of a BLOB.
     * @param range Format : bytes=&lt;start&gt;-&lt;end&gt;, HTTP Range header specifying blob chunk.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> checkChunk(String name, String digest, String range) {
        return this.serviceClient.checkChunkAsync(name, digest, range);
    }
}
