// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.containers.containerregistry.implementation.ManifestsImpl;
import com.azure.containers.containerregistry.implementation.models.AcrErrorsException;
import com.azure.containers.containerregistry.implementation.models.AcrManifests;
import com.azure.containers.containerregistry.implementation.models.ChangeableAttributes;
import com.azure.containers.containerregistry.implementation.models.Manifest;
import com.azure.containers.containerregistry.implementation.models.ManifestAttributes;
import com.azure.containers.containerregistry.implementation.models.ManifestWrapper;
import com.azure.containers.containerregistry.implementation.models.ManifestsCreateResponse;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous AzureContainerRegistry type. */
@ServiceClient(builder = AzureContainerRegistryBuilder.class, isAsync = true)
public final class ManifestsAsyncClient {
    private final ManifestsImpl serviceClient;

    /**
     * Initializes an instance of Manifests client.
     *
     * @param serviceClient the service client implementation.
     */
    ManifestsAsyncClient(ManifestsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param accept Accept header string delimited by comma. For example,
     *     application/vnd.docker.distribution.manifest.v2+json.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ManifestWrapper>> getWithResponse(String name, String reference, String accept) {
        return this.serviceClient.getWithResponseAsync(name, reference, accept);
    }

    /**
     * Get the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param accept Accept header string delimited by comma. For example,
     *     application/vnd.docker.distribution.manifest.v2+json.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ManifestWrapper> get(String name, String reference, String accept) {
        return this.serviceClient.getAsync(name, reference, accept);
    }

    /**
     * Put the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param payload Manifest body, can take v1 or v2 values depending on accept header.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ManifestsCreateResponse> createWithResponse(String name, String reference, Manifest payload) {
        return this.serviceClient.createWithResponseAsync(name, reference, payload);
    }

    /**
     * Put the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param payload Manifest body, can take v1 or v2 values depending on accept header.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Object> create(String name, String reference, Manifest payload) {
        return this.serviceClient.createAsync(name, reference, payload);
    }

    /**
     * Delete the manifest identified by `name` and `reference`. Note that a manifest can _only_ be deleted by `digest`.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponse(String name, String reference) {
        return this.serviceClient.deleteWithResponseAsync(name, reference);
    }

    /**
     * Delete the manifest identified by `name` and `reference`. Note that a manifest can _only_ be deleted by `digest`.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String name, String reference) {
        return this.serviceClient.deleteAsync(name, reference);
    }

    /**
     * List manifests of a repository.
     *
     * @param name Name of the image (including the namespace).
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AcrManifests>> getListWithResponse(String name, String last, Integer n, String orderby) {
        return this.serviceClient.getListWithResponseAsync(name, last, n, orderby);
    }

    /**
     * List manifests of a repository.
     *
     * @param name Name of the image (including the namespace).
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AcrManifests> getList(String name, String last, Integer n, String orderby) {
        return this.serviceClient.getListAsync(name, last, n, orderby);
    }

    /**
     * Get manifest attributes.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ManifestAttributes>> getAttributesWithResponse(String name, String reference) {
        return this.serviceClient.getAttributesWithResponseAsync(name, reference);
    }

    /**
     * Get manifest attributes.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ManifestAttributes> getAttributes(String name, String reference) {
        return this.serviceClient.getAttributesAsync(name, reference);
    }

    /**
     * Update attributes of a manifest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateAttributesWithResponse(
            String name, String reference, ChangeableAttributes value) {
        return this.serviceClient.updateAttributesWithResponseAsync(name, reference, value);
    }

    /**
     * Update attributes of a manifest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateAttributes(String name, String reference, ChangeableAttributes value) {
        return this.serviceClient.updateAttributesAsync(name, reference, value);
    }
}
