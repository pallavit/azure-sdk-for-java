// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.containers.containerregistry.implementation.ContainerRegistriesImpl;
import com.azure.containers.containerregistry.implementation.ContainerRegistryImpl;
import com.azure.containers.containerregistry.implementation.ContainerRegistryImplBuilder;
import com.azure.containers.containerregistry.implementation.ContainerRegistryRepositoriesImpl;
import com.azure.containers.containerregistry.models.AcrErrorsException;
import com.azure.containers.containerregistry.models.ContentProperties;
import com.azure.containers.containerregistry.models.DeleteRepositoryResult;
import com.azure.containers.containerregistry.models.RegistryArtifactProperties;
import com.azure.containers.containerregistry.models.RepositoryProperties;
import com.azure.containers.containerregistry.models.TagProperties;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.core.util.serializer.SerializerAdapter;
import reactor.core.publisher.Mono;

import static com.azure.core.util.FluxUtil.withContext;

/** Initializes a new instance of the asynchronous ContainerRegistry type. */
@ServiceClient(builder = ContainerRegistryClientBuilder.class, isAsync = true)
public final class ContainerRepositoryAsyncClient {
    private final ContainerRegistryRepositoriesImpl serviceClient;
    private final ContainerRegistriesImpl registriesImplClient;
    private final String repositoryName;
    private final String endpoint;


    ContainerRepositoryAsyncClient(String repositoryName, HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint) {
        ContainerRegistryImpl registryImpl = new ContainerRegistryImplBuilder()
            .pipeline(httpPipeline)
            .serializerAdapter(serializerAdapter)
            .endpoint(endpoint).buildClient();

        this.endpoint = endpoint;
        this.repositoryName = repositoryName;
        this.registriesImplClient = registryImpl.getContainerRegistries();
        this.serviceClient = registryImpl.getContainerRegistryRepositories();
    }

    /**
    * Get endpoint associated with the class.
    * */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Get registry associated with the class.
     * */
    public String getRegistry() {
        return this.endpoint;
    }

    /**
     * Get repository associated with the class.
     * */
    public String getRepository() {
        return this.repositoryName;
    }

    /**
     * Delete repository.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DeleteRepositoryResult>> deleteWithReponse() {
        return withContext(context -> deleteWithReponse(context));
    }

    /**
     * Delete repository.
     *
     * @param context Context associated with the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    Mono<Response<DeleteRepositoryResult>> deleteWithReponse(Context context) {
        return this.registriesImplClient.deleteRepositoryWithResponseAsync(repositoryName, context);
    }

    /**
     * Delete repository.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeleteRepositoryResult> delete() {
        return this.registriesImplClient.deleteRepositoryAsync(repositoryName);
    }

    /**
     * Delete registry artifact.
     *
     * @param digest Digest name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRegistryArtifactWithResponse(String digest) {
        return withContext(context -> this.deleteRegistryArtifactWithResponse(digest, context));
    }

    Mono<Response<Void>> deleteRegistryArtifactWithResponse(String digest, Context context) {
        return this.serviceClient.deleteManifestWithResponseAsync(repositoryName, digest, context);
    }

    /**
     * Delete registry artifact.
     *
     * @param digest digest to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteRegistryArtifact(String digest) {
        return this.serviceClient.deleteManifestAsync(repositoryName, digest);
    }

    /**
     * Delete tag.
     *
     * @param reference Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTagWithResponse(String reference) {
        return withContext(context -> this.deleteTagWithResponse(reference, context));
    }

    Mono<Response<Void>> deleteTagWithResponse(String reference, Context context) {
        return this.serviceClient.deleteTagWithResponseAsync(repositoryName, reference, context);
    }

    /**
     * Delete tag.
     *
     * @param reference Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteTag(String reference) {
        return this.serviceClient.deleteTagAsync(repositoryName, reference);
    }

    /**
     * Get repository properties.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return repository properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RepositoryProperties>> getPropertiesWithResponse() {
        return withContext(context -> this.getPropertiesWithResponse(context));
    }

    Mono<Response<RepositoryProperties>> getPropertiesWithResponse(Context context) {
        return this.serviceClient.getPropertiesWithResponseAsync(repositoryName, context);
    }

    /**
     * Get repository properties.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return repository properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RepositoryProperties> getProperties()
    {
        return withContext(context -> this.getProperties(context));
    }

    Mono<RepositoryProperties> getProperties(Context context) {
        return this.serviceClient.getPropertiesAsync(repositoryName, context);
    }

    /**
     * Get registry artifact properties.
     *
     * @param digest Digest of a BLOB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registry artifact properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RegistryArtifactProperties>> getRegistryArtifactPropertiesWithResponse(String digest) {
        return withContext(context -> this.getRegistryArtifactPropertiesWithResponse(digest, context));
    }

    Mono<Response<RegistryArtifactProperties>> getRegistryArtifactPropertiesWithResponse(String digest, Context context) {
        return this.serviceClient.getRegistryArtifactPropertiesWithResponseAsync(repositoryName, digest, context);
    }

    /**
     * Get registry artifact properties.
     *
     * @param digest Digest of a BLOB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registry artifact properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RegistryArtifactProperties> getRegistryArtifactProperties(String digest) {
        return this.serviceClient.getRegistryArtifactPropertiesAsync(repositoryName, digest);
    }

    /**
     * List manifests of a repository.
     *
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RegistryArtifactProperties> listRegistryArtifacts(String last, Integer n, String orderby) {
        throw new RuntimeException();
    }


    /**
     * Get tag properties
     *
     * @param reference Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tag attributes by tag.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TagProperties>> getTagPropertiesWithResponse(String reference) {
        return withContext(context -> getTagPropertiesWithResponse(reference, context));
    }

    Mono<Response<TagProperties>> getTagPropertiesWithResponse(String reference, Context context) {
        return this.serviceClient.getTagPropertiesWithResponseAsync(repositoryName, reference, context);
    }

    /**
     * Get tag attributes.
     *
     * @param reference Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tag attributes by tag.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TagProperties> getTagProperties(String reference) {
        return this.serviceClient.getTagPropertiesAsync(repositoryName, reference);
    }

    /**
     * List tags of a repository.
     *
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @param digest filter by digest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of tag details.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<TagProperties> listTags(String last, Integer n, String orderby, String digest) {
        throw new RuntimeException();
    }

    /**
     * Update the attribute identified by `name` where `reference` is the name of the repository.
     *
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setPropertiesWithResponse(ContentProperties value) {
        return withContext(context -> this.setPropertiesWithResponse(value, context));
    }

    Mono<Response<Void>> setPropertiesWithResponse(ContentProperties value, Context context) {
        return this.serviceClient.setPropertiesWithResponseAsync(repositoryName, value, context);
    }

    /**
     * Update the attribute identified by `name` where `reference` is the name of the repository.
     *
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> setProperties(ContentProperties value) {
        return this.serviceClient.setPropertiesAsync(repositoryName, value);
    }

    /**
     * Update tag attributes.
     *
     * @param reference Tag name.
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setTagAttributesWithResponse(
            String reference, ContentProperties value) {
        return withContext(context -> this.setTagAttributesWithResponse(reference, value, context));
    }

    Mono<Response<Void>> setTagAttributesWithResponse(
        String reference, ContentProperties value, Context context) {
        return this.serviceClient.updateTagAttributesWithResponseAsync(repositoryName, reference, value, context);
    }

    /**
     * Update tag attributes.
     *
     * @param reference Tag name.
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> setTagAttributes(String reference, ContentProperties value) {
        return this.serviceClient.updateTagAttributesAsync(repositoryName, reference, value);
    }

    /**
     * Update attributes of a manifest.
     *
     * @param digest Digest of a BLOB.
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setManifestAttributesWithResponse(
            String digest, ContentProperties value) {
        return withContext(context -> this.setManifestAttributesWithResponse(digest, value, context));
    }

    Mono<Response<Void>> setManifestAttributesWithResponse(
        String digest, ContentProperties value, Context context) {
        return this.serviceClient.updateManifestAttributesWithResponseAsync(repositoryName, digest, value, context);
    }


    /**
     * Update attributes of a manifest.
     *
     * @param digest Digest of a BLOB.
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> setManifestAttributes(String digest, ContentProperties value) {
        return this.serviceClient.updateManifestAttributesAsync(repositoryName, digest, value);
    }
}
