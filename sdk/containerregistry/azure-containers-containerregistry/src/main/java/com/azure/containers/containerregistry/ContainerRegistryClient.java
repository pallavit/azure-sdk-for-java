// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.containers.containerregistry.implementation.ContainerRegistriesImpl;
import com.azure.containers.containerregistry.implementation.models.AcrErrorsException;
import com.azure.containers.containerregistry.implementation.models.Repositories;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Initializes a new instance of the synchronous ContainerRegistry type. */
@ServiceClient(builder = ContainerRegistryBuilder.class)
public final class ContainerRegistryClient {
    private final ContainerRegistriesImpl serviceClient;

    /**
     * Initializes an instance of ContainerRegistries client.
     *
     * @param serviceClient the service client implementation.
     */
    ContainerRegistryClient(ContainerRegistriesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

//    /**
//     * Tells whether this Docker Registry instance supports Docker Registry HTTP API v2.
//     *
//     * @throws AcrErrorsException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     */
//    @ServiceMethod(returns = ReturnType.SINGLE)
//    public void checkDockerV2Support() {
//        this.serviceClient.checkDockerV2Support();
//    }
//
//    /**
//     * Tells whether this Docker Registry instance supports Docker Registry HTTP API v2.
//     *
//     * @param context The context to associate with this operation.
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws AcrErrorsException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return the response.
//     */
//    @ServiceMethod(returns = ReturnType.SINGLE)
//    public Response<Void> checkDockerV2SupportWithResponse(Context context) {
//        return this.serviceClient.checkDockerV2SupportWithResponse(context);
//    }

//    /**
//     * List repositories.
//     *
//     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
//     *     last.
//     * @param n query parameter for max number of items.
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws AcrErrorsException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return list of repositories.
//     */
//    @ServiceMethod(returns = ReturnType.SINGLE)
//    public Repositories getRepositories(String last, Integer n) {
//        return this.serviceClient.getRepositories(last, n);
//    }

    /**
     * List repositories.
     *
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of repositories.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Repositories> getRepositoriesWithResponse(String last, Integer n, Context context) {
        return this.serviceClient.getRepositoriesWithResponse(last, n, context);
    }

//    /**
//     * Get repository attributes.
//     *
//     * @param name Name of the image (including the namespace).
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws AcrErrorsException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return repository attributes.
//     */
//    @ServiceMethod(returns = ReturnType.SINGLE)
//    public RepositoryProperties getRepositoryAttributes(String name) {
//        return this.serviceClient.getRepositoryAttributes(name);
//    }
//
//    /**
//     * Get repository attributes.
//     *
//     * @param name Name of the image (including the namespace).
//     * @param context The context to associate with this operation.
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws AcrErrorsException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return repository attributes.
//     */
//    @ServiceMethod(returns = ReturnType.SINGLE)
//    public Response<RepositoryProperties> getRepositoryAttributesWithResponse(String name, Context context) {
//        return this.serviceClient.getRepositoryAttributesWithResponse(name, context);
//    }
//
//    /**
//     * Delete the repository identified by `name`.
//     *
//     * @param name Name of the image (including the namespace).
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws AcrErrorsException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return deleted repository.
//     */
//    @ServiceMethod(returns = ReturnType.SINGLE)
//    public DeletedRepository deleteRepository(String name) {
//        return this.serviceClient.deleteRepository(name);
//    }
//
//    /**
//     * Delete the repository identified by `name`.
//     *
//     * @param name Name of the image (including the namespace).
//     * @param context The context to associate with this operation.
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws AcrErrorsException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return deleted repository.
//     */
//    @ServiceMethod(returns = ReturnType.SINGLE)
//    public Response<DeletedRepository> deleteRepositoryWithResponse(String name, Context context) {
//        return this.serviceClient.deleteRepositoryWithResponse(name, context);
//    }
//
//    /**
//     * Update the attribute identified by `name` where `reference` is the name of the repository.
//     *
//     * @param name Name of the image (including the namespace).
//     * @param value Repository attribute value.
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws AcrErrorsException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     */
//    @ServiceMethod(returns = ReturnType.SINGLE)
//    public void updateRepositoryAttributes(String name, ContentPermissions value) {
//        this.serviceClient.updateRepositoryAttributes(name, value);
//    }
//
//    /**
//     * Update the attribute identified by `name` where `reference` is the name of the repository.
//     *
//     * @param name Name of the image (including the namespace).
//     * @param value Repository attribute value.
//     * @param context The context to associate with this operation.
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws AcrErrorsException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return the response.
//     */
//    @ServiceMethod(returns = ReturnType.SINGLE)
//    public Response<Void> updateRepositoryAttributesWithResponse(
//            String name, ContentPermissions value, Context context) {
//        return this.serviceClient.updateRepositoryAttributesWithResponse(name, value, context);
//    }
}
