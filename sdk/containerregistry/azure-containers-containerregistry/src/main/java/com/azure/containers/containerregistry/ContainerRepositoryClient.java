// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.containers.containerregistry.models.ContentProperties;
import com.azure.containers.containerregistry.models.AcrErrorsException;
import com.azure.containers.containerregistry.models.DeleteRepositoryResult;
import com.azure.containers.containerregistry.models.RegistryArtifactProperties;
import com.azure.containers.containerregistry.models.RepositoryProperties;
import com.azure.containers.containerregistry.models.TagProperties;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Initializes a new instance of the synchronous ContainerRegistry type. */
@ServiceClient(builder = ContainerRegistryClientBuilder.class)
public final class ContainerRepositoryClient {
    private final ContainerRepositoryAsyncClient serviceClient;

    /**
     * Initializes an instance of ContainerRegistryRepositories client.
     *
     * @param serviceClient the service client implementation.
     */
    ContainerRepositoryClient(ContainerRepositoryAsyncClient serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get endpoint associated with the class.
     * */
    public String getEndpoint() {
        return this.serviceClient.getEndpoint();
    }

    /**
     * Get registry associated with the class.
     * */
    public String getRegistry() {
        return this.serviceClient.getRegistry();
    }

    /**
     * Get repository associated with the class.
     * */
    public String getRepository() {
        return this.serviceClient.getRepository();
    }

    /**
     * Delete repository.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeleteRepositoryResult> deleteWithReponse() {
        return this.serviceClient.deleteWithReponse().block();
    }

    /**
     * Delete repository.
     *
     * @param context Context associated with the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeleteRepositoryResult> deleteWithReponse(Context context) {
        return this.serviceClient.deleteWithReponse(context).block();
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeleteRepositoryResult delete() {
        return this.serviceClient.delete().block();
    }

    /**
     * Delete artifact.
     *
     * @param digest Digest name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteRegistryArtifactWithResponse(String digest) {
        return this.serviceClient.deleteRegistryArtifactWithResponse(digest, Context.NONE).block();
    }

    /**
     * Delete artifact.
     *
     * @param digest Digest name.
     * @param context Context associated with the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteRegistryArtifactWithResponse(String digest, Context context) {
        return this.serviceClient.deleteRegistryArtifactWithResponse(digest, context).block();
    }

    /**
     * Delete registry artifact.
     *
     * @param digest digest to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */

    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteRegistryArtifact(String digest) {
        this.serviceClient.deleteRegistryArtifact(digest).block();
    }

    /**
     * Delete tag.
     *
     * @param reference Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTagWithResponse(String reference) {
        return this.serviceClient.deleteTagWithResponse(reference).block();
    }

    /**
     * Delete tag.
     *
     * @param reference Tag name.
     * @param context associated with the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTagWithResponse(String reference, Context context) {
        return this.serviceClient.deleteTagWithResponse(reference, context).block();
    }

    /**
     * Delete tag.
     *
     * @param reference Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteTag(String reference) {
        this.serviceClient.deleteTag(reference).block();
    }

    /**
     * Get repository attributes.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return repository attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RepositoryProperties> getPropertiesWithResponse() {
        return this.serviceClient.getPropertiesWithResponse().block();
    }


    /**
     * Get repository attributes.
     *
     * @param context Context associated with the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return repository attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RepositoryProperties> getPropertiesWithResponse(Context context) {
        return this.serviceClient.getPropertiesWithResponse(context).block();
    }

    /**
     * Get repository attributes.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return repository attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RepositoryProperties getProperties()
    {
        return this.serviceClient.getProperties().block();
    }

    /**
     * Get manifest attributes.
     *
     * @param digest Digest of a BLOB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RegistryArtifactProperties> getRegistryArtifactPropertiesWithResponse(String digest) {
        return this.serviceClient.getRegistryArtifactPropertiesWithResponse(digest).block();
    }

    /**
     * Get manifest attributes.
     *
     * @param digest Digest of a BLOB.
     * @param context Context associated with the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RegistryArtifactProperties> getRegistryArtifactPropertiesWithResponse(String digest, Context context) {
        return this.serviceClient.getRegistryArtifactPropertiesWithResponse(digest, context).block();
    }

    /**
     * List manifests of a repository.
     *
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RegistryArtifactProperties> listRegistryArtifacts(String last, Integer n, String orderby) {
        throw new RuntimeException();
    }


    /**
     * Get tag attributes by tag.
     *
     * @param reference Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tag attributes by tag.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TagProperties> getTagPropertiesWithResponse(String reference) {
        return this.serviceClient.getTagPropertiesWithResponse(reference).block();
    }

    /**
     * Get tag attributes by tag.
     *
     * @param reference Tag name.
     * @param context Context associated with the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tag attributes by tag.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)

    public Response<TagProperties> getTagPropertiesWithResponse(String reference, Context context) {
        return this.serviceClient.getTagPropertiesWithResponse(reference, context).block();
    }

    /**
     * Get tag attributes by tag.
     *
     * @param reference Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tag attributes by tag.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TagProperties getTagProperties(String reference) {
        return this.serviceClient.getTagProperties(reference).block();
    }

    /**
     * List tags of a repository.
     *
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @param digest filter by digest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of tag details.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TagProperties> listTags(String last, Integer n, String orderby, String digest) {
        throw new RuntimeException();
    }

    /**
     * Update the attribute identified by `name` where `reference` is the name of the repository.
     *
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setPropertiesWithResponse(ContentProperties value) {
        return this.serviceClient.setPropertiesWithResponse(value).block();
    }

    /**
     * Update the attribute identified by `name` where `reference` is the name of the repository.
     *
     * @param value Repository attribute value.
     * @param context Context associated with the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> setPropertiesWithResponse(ContentProperties value, Context context) {
        return this.serviceClient.setPropertiesWithResponse(value, context).block();
    }

    /**
     * Update the attribute identified by `name` where `reference` is the name of the repository.
     *
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setProperties(ContentProperties value) {
        this.serviceClient.setProperties(value).block();
    }

    /**
     * Update tag attributes.
     *
     * @param reference Tag name.
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setTagAttributesWithResponse(
        String reference, ContentProperties value) {
        return this.serviceClient.setTagAttributesWithResponse(reference, value).block();
    }

    Response<Void> setTagAttributesWithResponse(
        String reference, ContentProperties value, Context context) {
        return this.serviceClient.setTagAttributesWithResponse(reference, value, context).block();
    }

    /**
     * Update tag attributes.
     *
     * @param reference Tag name.
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setTagAttributes(String reference, ContentProperties value) {
        this.serviceClient.setTagAttributes(reference, value).block();
    }

    /**
     * Update attributes of a manifest.
     *
     * @param digest Digest of a BLOB.
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setManifestAttributesWithResponse(
        String digest, ContentProperties value) {
        return this.serviceClient.setManifestAttributesWithResponse(digest, value).block();
    }

    /**
     * Update attributes of a manifest.
     *
     * @param digest Digest of a BLOB.
     * @param value Repository attribute value.
     * @param context Context associated with the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    public Response<Void> setManifestAttributesWithResponse(
        String digest, ContentProperties value, Context context) {
        return this.serviceClient.setManifestAttributesWithResponse(digest, value, context).block();
    }

    /**
     * Update attributes of a manifest.
     *
     * @param digest Digest of a BLOB.
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setManifestAttributes(String digest, ContentProperties value) {
        this.serviceClient.setManifestAttributes(digest, value).block();
    }
}
